//@ts-nocheck
import {
  TypeOptions,
  InferOpts,
  ApplyOpts,
  InferParsedType,
  MinMax,
  MakeNotNull,
  MakeNotNullish,
  MakeNullable,
  MakeNullish,
  MakeOptional,
  MakeRequired,
  MakePrivate,
  MakePublic,
  BuildStringBsonSchemaLiteral,
  BuildObjectBsonSchemaLiteral,
  BuildNumberBsonSchemaLiteral,
  BuildBooleanBsonSchemaLiteral,
  BuildOidBsonSchemaLiteral,
  BuildArrayBsonSchemaLiteral,
  RequiredKeysArray,
} from "./types-new.bak";
import { Double, ObjectId, ObjectIdLike } from "bson";

/**
 * To-Do list for features to implement:
 * @see https://www.mongodb.com/docs/manual/reference/operator/query/jsonSchema/#std-label-jsonSchema-keywords
 * //TODO: Implement:
 * - Maps & Sets
 * - Enums
 * - Documents
 * - Dates
 * - "Passthrough" & "Strip" & "Strict" modes
 * - Coercion
 */
const privateSymbol = Symbol("private");

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB    EEEEEEEEEEEEEEEEEEEE RRRRRRRRRRRRRRRRR    RRRRRRRRRRRRRRRRR     ///
///  B////////////////B   E//////////////////E R////////////////R   R////////////////R    ///
///  B/////////////////B  E//////////////////E R/////////////////R  R/////////////////R   ///
///  B//////BBBBBB//////B E/////EEEEEEEEE////E R//////RRRRRRR/////R R//////RRRRRRR/////R  ///
///  BB/////B     B/////B E/////E        EEEEE RR/////R      R////R RR/////R      R////R  ///
///    B////B     B/////B E/////E                R////R      R////R   R////R      R////R  ///
///    B////B     B/////B E/////E                R////R      R////R   R////R      R////R  ///
///    B////BBBBBB/////B  E/////EEEEEEEEEE       R////RRRRRRR////R    R////RRRRRRR////R   ///
///    B////////////BB    E//////////////E       R/////////////RR     R/////////////RR    ///
///    B////BBBBBB/////B  E/////EEEEEEEEEE       R////RRRRRRR////R    R////RRRRRRR////R   ///
///    B////B     B/////B E/////E                R////R      R////R   R////R      R////R  ///
///    B////B     B/////B E/////E                R////R      R////R   R////R      R////R  ///
///    B////B     B/////B E/////E        EEEEE   R////R      R////R   R////R      R////R  ///
///  BB/////BBBBBB//////B E/////EEEEEEEEE////E RR/////R      R////R RR/////R      R////R  ///
///  B/////////////////B  E//////////////////E R//////R      R////R R//////R      R////R  ///
///  B////////////////B   E//////////////////E R//////R      R////R R//////R      R////R  ///
///  BBBBBBBBBBBBBBBBB    EEEEEEEEEEEEEEEEEEEE RRRRRRRR      RRRRRR RRRRRRRR      RRRRRR  ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

class BorgError<T extends BorgError | undefined = undefined> extends Error {
  #path: string[] = [];

  constructor(message: string, cause?: T, path?: string[]) {
    super(`${message}`);
    this.#path = [...(path || []), ...(cause?.path || [])];
    this.message = `${message} at "${this.#path.join(".") || "{ROOT}"}"${
      cause?.message ? `: ${cause.message}` : ""
    }`;
    if (cause) {
      this.stack = `${this.stack} caused by ${cause.stack}`;
    }
  }

  get path() {
    return this.#path;
  }
  /* c8 ignore next */
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB        OOOOOOOOOOOO     RRRRRRRRRRRRRRRRR        GGGGGGGGGGG       ///
///  B////////////////B     OO////////////OO   R////////////////R     GG///////////GG     ///
///  B/////////////////B   OO//////////////OO  R/////////////////R   GG/////////////GG    ///
///  B//////BBBBBB//////B O///////OOO////////O R//////RRRRRRR/////R G/////GGGGGGG/////G   ///
///  BB/////B     B/////B O//////O   O///////O RR/////R      R////R G////G       G////G   ///
///    B////B     B/////B O/////O     O//////O   R////R      R////R G////G       GGGGGG   ///
///    B////B     B/////B O/////O     O//////O   R////R      R////R G////G                ///
///    B////BBBBBB/////B  O/////O     O//////O   R////RRRRRRR////R  G////G   GGGGGGGG     ///
///    B////////////BB    O/////O     O//////O   R/////////////RR   G////G  GG///////GG   ///
///    B////BBBBBB/////B  O/////O     O//////O   R////RRRRRRR////R  G////G  G/////////GG  ///
///    B////B     B/////B O/////O     O//////O   R////R      R////R G////G  G////G/////G  ///
///    B////B     B/////B O/////O     O//////O   R////R      R////R G////G   GGGG G////G  ///
///    B////B     B/////B O//////O   O///////O   R////R      R////R G/////G      GG////G  ///
///  BB/////BBBBBB//////B O///////OOO////////O RR/////R      R////R G//////GGGGGG//////G  ///
///  B/////////////////B  OO///////////////OO  R//////R      R////R  GG////////////////G  ///
///  B////////////////B    OO/////////////OO   R//////R      R////R    GG///////GG/////G  ///
///  BBBBBBBBBBBBBBBBB       OOOOOOOOOOOOOO    RRRRRRRR      RRRRRR     GGGGGGGG  GGGGGG  ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

type AnyKind = "string" | "number" | "boolean" | "object" | "id" | "array";
export type AnyBorgId = BorgId<TypeOptions, string | ObjectId>;
export type AnyBorgString = BorgString<TypeOptions, MinMax, string>;
export type AnyBorgNumber = BorgNumber<TypeOptions, MinMax>;
export type AnyBorgBoolean = BorgBoolean<TypeOptions>;
export type AnyBorgArray = BorgArray<TypeOptions, MinMax, B.SomeBorg>;
export type AnyBorgObject = BorgObject<
  TypeOptions,
  { [key: string]: B.SomeBorg }
>;

/*TODO: type BorgOptions = { exactOptionalProperties?: Boolean | undefined;} */
abstract class Borg<
  TKind extends AnyKind,
  TOpts extends TypeOptions,
  TShape extends TKind extends "object"
    ? { [key: string]: B.SomeBorg }
    : TKind extends "array"
    ? B.SomeBorg
    : {} = TKind extends "object"
    ? { [key: string]: B.SomeBorg }
    : TKind extends "array"
    ? B.SomeBorg
    : {},
> {
  abstract get meta(): TKind extends "object"
    ? {
        kind: "object";
        keys: Array<keyof TShape extends never ? string : keyof TShape>;
        requiredKeys: RequiredKeysArray<TShape>;
        shape: TShape extends { [key: string]: B.SomeBorg }
          ? TShape
          : never;
      } & InferOpts<TOpts>
    : TKind extends "array"
    ? {
        shape: TShape extends B.SomeBorg ? TShape : never,
        kind: "array";
        maxItems: number | null;
        minItems: number | null;
      } & InferOpts<TOpts>
    : TKind extends "string"
    ? {
        kind: "string";
        maxLength: number | null;
        minLength: number | null;
        pattern: string | undefined;
      } & InferOpts<TOpts>
    : TKind extends "number"
    ? {
        kind: "number";
        max: number | null;
        min: number | null;
      } & InferOpts<TOpts>
    : TKind extends "id"
    ? { kind: "id"; format: "string" | "oid" } & InferOpts<TOpts>
    : TKind extends "boolean"
    ? { kind: "boolean" } & InferOpts<TOpts>
    : never;

  abstract parse(input: unknown): any;
  abstract serialize(input: any): any;
  abstract deserialize(input: any): any;
  abstract toBson(input: any): any;
  abstract fromBson(input: any): any;
  abstract bsonSchema(): any;
  abstract private(): Borg<TKind, MakePrivate<TOpts>, TShape>;
  abstract public(): Borg<TKind, MakePublic<TOpts>, TShape>;
  abstract optional(): Borg<TKind, MakeOptional<TOpts>, TShape>;
  abstract nullable(): Borg<TKind, MakeNullable<TOpts>, TShape>;
  abstract nullish(): Borg<TKind, MakeNullish<TOpts>, TShape>;
  abstract required(): Borg<TKind, MakeRequired<TOpts>, TShape>;
  abstract notNull(): Borg<TKind, MakeNotNull<TOpts>, TShape>;
  abstract notNullish(): Borg<TKind, MakeNotNullish<TOpts>, TShape>;
  /* c8 ignore next */
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB        OOOOOOOOOOOO     BBBBBBBBBBBBBBBBB          JJJJJJJJJJJJJJ  ///
///  B////////////////B     OO////////////OO   B////////////////B         J////////////J  ///
///  B/////////////////B   OO//////////////OO  B/////////////////B        J////////////J  ///
///  B//////BBBBBB//////B O///////OOO////////O BB/////BBBBBB//////B       JJJJJJ////JJJJ  ///
///  BB/////B     B/////B O//////O   O///////O   B////B     B/////B            J////J     ///
///    B////B     B/////B O/////O     O//////O   B////B     B/////B            J////J     ///
///    B////B     B/////B O/////O     O//////O   B////B     B/////B            J////J     ///
///    B////BBBBBB/////B  O/////O     O//////O   B////BBBBBB/////B             J////J     ///
///    B////////////BB    O/////O     O//////O   B/////////////BB     JJJJJJ   J////J     ///
///    B////BBBBBB/////B  O/////O     O//////O   B////BBBBBB/////B   J//////J  J////J     ///
///    B////B     B/////B O/////O     O//////O   B////B     B/////B J//////J   J////J     ///
///    B////B     B/////B O/////O     O//////O   B////B     B/////B J/////J    J////J     ///
///    B////B     B/////B O/////O     O//////O   B////B     B/////B J/////J    J////J     ///
///  BB/////BBBBBB//////B O///////OOO////////O BB/////BBBBBB//////B J//////JJJJ/////J     ///
///  B/////////////////B  OO///////////////OO  B/////////////////B   J//////////////J     ///
///  B////////////////B    OO/////////////OO   B////////////////B     J////////////J      ///
///  BBBBBBBBBBBBBBBBB       OOOOOOOOOOOOOO    BBBBBBBBBBBBBBBBB       JJJJJJJJJJJJ       ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

class BorgObject<
  const TOpts extends TypeOptions = ["required", "notNull", "public"],
  const TShape extends { [key: string]: B.SomeBorg } = {
    [key: string]: B.SomeBorg;
  },
> extends Borg<"object", TOpts, TShape> {
  #shape: TShape;
  #opts = {
    optional: false,
    nullable: false,
    private: false,
  };

  constructor(shape: TShape) {
    super();
    this.#shape = shape;
  }

  static clone<const TBorg extends BorgObject<any, any>>(
    borg: TBorg,
  ): TBorg {
    const clone = new BorgObject(borg.#shape);
    clone.#opts = { ...borg.#opts };
    return clone as any;
  }

  get meta(): {
    kind: "object";
    shape: TShape extends { [key: string]: B.SomeBorg } ? TShape : never;
    keys: Array<keyof TShape extends never ? string : keyof TShape>;
    requiredKeys: RequiredKeysArray<TShape>;
  } & InferOpts<TOpts> {
    return {
      kind: "object",
      shape: this.#shape,
      keys: Object.keys(this.#shape) as any,
      requiredKeys: Object.keys(this.#shape).filter(
        k => !this.#shape[k]?.meta.optional,
      ) as any,
      ...this.#opts,
    } as any;
  }

  parse(
    input: unknown,
  ): ApplyOpts<
    { [key in keyof TShape]: ReturnType<TShape[key]["parse"]> },
    TOpts
  > {
    if (this.#opts.private) {
      return privateSymbol as any;
    }
    if (input === undefined) {
      if (this.#opts.optional) return void 0 as any;
      throw new BorgError(
        `OBJECT_ERROR: Expected object ${
          this.#opts.nullable ? "or null" : ""
        }, got undefined`,
      );
    }
    if (input === null) {
      if (this.#opts.nullable) return null as any;
      throw new BorgError(
        `OBJECT_ERROR: Expected object ${
          this.#opts.optional ? "or undefined" : ""
        }, got null`,
      );
    }
    if (typeof input !== "object") {
      throw new BorgError(
        `OBJECT_ERROR: Expected object ${
          this.#opts.optional ? "or undefined" : ""
        }${this.#opts.nullable ? " or null" : ""}, got ${typeof input}`,
      );
    }
    if (Array.isArray(input)) {
      throw new BorgError(
        `OBJECT_ERROR: Expected object ${
          this.#opts.optional ? "or undefined" : ""
        }${this.#opts.nullable ? " or null" : ""}, got array`,
      );
    }
    const result: { [key: string]: any } = {};

    for (const key in this.#shape) {
      const schema = this.#shape[key];
      if (schema === undefined) continue;
      if (key in input) {
        let parsed: any;
        try {
          parsed = schema.parse(input[key as keyof typeof input]);
        } catch (e) {
          if (e instanceof BorgError) {
            throw new BorgError(
              `OBJECT_ERROR: Error parsing property "${key}"`,
              e,
              [key],
            );
          }
          throw e;
        }
        if (parsed !== privateSymbol) {
          result[key] = parsed;
        }
        continue;
      }

      //TODO: implement 'exactOptional' by providing a config flag somewhere?
      try {
        console.log(JSON.stringify(schema.bsonSchema(), undefined, 2));
        schema.parse(undefined);
      } catch (e) {
        if (e instanceof BorgError) {
          throw new BorgError(`OBJECT_ERROR: Missing property "${key}"`, e, [
            key,
          ]);
        }
        throw e;
      }
    }
    return result as any;
  }

  serialize(input: ReturnType<this["parse"]>): ApplyOpts<
    {
      [key in keyof TShape]: (typeof input)[key extends keyof typeof input
        ? key
        : never] extends typeof privateSymbol
        ? never
        : ReturnType<TShape[key]["serialize"]>;
    },
    TOpts
  > {
    if (this.#opts.private) throw new Error("Cannot serialize private data");
    if (input === null || input === undefined) return input as any;

    const result = {} as any;
    for (const key in this.#shape) {
      if (!(key in input)) continue;
      const inputVal = input[key];
      if (inputVal === privateSymbol) continue;
      const schema = this.#shape[key];
      if (schema === undefined) continue;
      const serialized = schema.serialize(inputVal);
      result[key] = serialized;
    }
    return result;
  }

  deserialize(input: ReturnType<this["serialize"]>): ReturnType<this["parse"]> {
    if (input === null) return null as any;
    if (input === undefined) return undefined as any;
    const result = {} as any;
    for (const key in this.#shape) {
      if (!(key in input)) continue;
      const inputVal = input[key];
      if (inputVal === privateSymbol) continue;
      const schema = this.#shape[key];
      if (schema === undefined) continue;
      const deserialized = schema.deserialize(inputVal);
      result[key] = deserialized;
    }
    return result;
  }

  bsonSchema() {
    return {
      bsonType: this.#opts.nullable ? ["object", "null"] : "object",
      required: Object.keys(this.#shape).filter(key => {
        try {
          this.#shape[key]?.parse(undefined);
        } catch (e) {
          return true;
        }
        return false;
      }),
      properties: Object.fromEntries(
        Object.entries(this.#shape).map(([key, value]) => [
          key,
          value.bsonSchema(),
        ]),
      ),
    } as BuildObjectBsonSchemaLiteral<TShape, TOpts>;
  }

  toBson(input: ReturnType<this["parse"]>): ApplyOpts<
    {
      [key in keyof TShape]: (typeof input)[key extends keyof typeof input
        ? key
        : never] extends never
        ? never
        : ReturnType<TShape[key]["toBson"]>;
    },
    TOpts
  > {
    if (input === null) return null as any;
    if (input === undefined) return undefined as any;
    const result = {} as any;
    for (const key in this.#shape) {
      if (!(key in input)) continue;
      const schema = this.#shape[key];
      // @ts-expect-error - this is a hack to get around the fact that TS doesn't know that the key is in the input
      const bson = schema.toBson(input[key]);
      result[key] = bson;
    }
    return result;
  }

  fromBson(input: ReturnType<this["toBson"]>): ReturnType<this["parse"]> {
    if (input === null) return null as any;
    if (input === undefined) return undefined as any;
    const result = {} as any;
    for (const key in this.#shape) {
      if (!(key in input)) continue;
      const schema = this.#shape[key];
      // @ts-expect-error - this is a hack to get around the fact that TS doesn't know that the key is in the input
      const bson = schema.fromBson(input[key]);
      result[key] = bson;
    }
    return result;
  }

  optional(): BorgObject<MakeOptional<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.optional = true;
    return clone as any;
  }

  nullable(): BorgObject<MakeNullable<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.nullable = true;
    return clone as any;
  }

  nullish(): BorgObject<MakeNullish<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.optional = true;
    clone.#opts.nullable = true;
    return clone as any;
  }

  required(): BorgObject<MakeRequired<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.optional = false;
    return clone as any;
  }

  notNull(): BorgObject<MakeNotNull<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.nullable = false;
    return clone as any;
  }

  notNullish(): BorgObject<MakeNotNullish<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.optional = false;
    clone.#opts.nullable = false;
    return clone as any;
  }

  private(): BorgObject<MakePrivate<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.private = true;
    return clone as any;
  }

  public(): BorgObject<MakePublic<TOpts>, TShape> {
    const clone = BorgObject.clone(this);
    clone.#opts.private = false;
    return clone as any;
  }
  /* c8 ignore next */
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB          AAAAAAAA       RRRRRRRRRRRRRRRRR    RRRRRRRRRRRRRRRRR     ///
///  B////////////////B        A////////A      R////////////////R   R////////////////R    ///
///  B/////////////////B      A//////////A     R/////////////////R  R/////////////////R   ///
///  B//////BBBBBB//////B    A/////AA/////A    R//////RRRRRRR/////R R//////RRRRRRR/////R  ///
///  BB/////B     B/////B   A/////A  A/////A   RR/////R      R////R RR/////R      R////R  ///
///    B////B     B/////B  A/////A    A/////A    R////R      R////R   R////R      R////R  ///
///    B////B     B/////B A/////A      A/////A   R////R      R////R   R////R      R////R  ///
///    B////BBBBBB/////B  A/////A      A/////A   R////RRRRRRR////R    R////RRRRRRR////R   ///
///    B////////////BB    A/////AAAAAAAA/////A   R/////////////RR     R/////////////RR    ///
///    B////BBBBBB/////B  A//////////////////A   R////RRRRRRR////R    R////RRRRRRR////R   ///
///    B////B     B/////B A/////AAAAAAAA/////A   R////R      R////R   R////R      R////R  ///
///    B////B     B/////B A/////A      A/////A   R////R      R////R   R////R      R////R  ///
///    B////B     B/////B A/////A      A/////A   R////R      R////R   R////R      R////R  ///
///  BB/////BBBBBB//////B A/////A      A/////A RR/////R      R////R RR/////R      R////R  ///
///  B/////////////////B  A/////A      A/////A R//////R      R////R R//////R      R////R  ///
///  B////////////////B   A/////A      A/////A R//////R      R////R R//////R      R////R  ///
///  BBBBBBBBBBBBBBBBB    AAAAAAA      AAAAAAA RRRRRRRR      RRRRRR RRRRRRRR      RRRRRR  ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

class BorgArray<
  const TOpts extends TypeOptions = ["required", "notNull", "public"],
  const TLength extends MinMax = [null, null],
  const TShape extends B.SomeBorg = B.SomeBorg,
> extends Borg<"array", TOpts, TShape> {
  #opts = {
    optional: false,
    nullable: false,
    private: false,
  };
  #shape: TShape;
  #max: TLength[1] = null;
  #min: TLength[0] = null;

  constructor(shape: TShape) {
    super();
    this.#shape = shape;
  }

  static clone<const TBorg extends BorgArray<any, any, any>>(
    borg: TBorg,
  ): TBorg {
    const clone = new BorgArray(borg.#shape);
    clone.#opts = { ...borg.#opts };
    clone.#max = borg.#max;
    clone.#min = borg.#min;
    return clone as any;
  }

  get meta(): {
    kind: "array";
    shape: TShape extends B.SomeBorg ? TShape : never,
    maxItems: TLength[1];
    minItems: TLength[0];
  } & InferOpts<TOpts> {
    return {
      kind: "array",
      maxItems: this.#max,
      minItems: this.#min,
      shape: this.#shape,
      ...this.#opts,
    } as any;
  }

  parse(input: unknown): ApplyOpts<Array<ReturnType<TShape["parse"]>>, TOpts> {
    if (input === null) {
      if (this.#opts.nullable) return null as any;
      throw new Error("Expected array, got null");
    }
    if (input === undefined) {
      if (this.#opts.optional) return undefined as any;
      throw new Error("Expected array, got undefined");
    }
    if (!Array.isArray(input)) {
      throw new Error("Expected array, got " + typeof input);
    }
    if (this.#max !== null && input.length > this.#max) {
      throw new Error(
        `Expected array length to be less than or equal to ${this.#max}, got ${
          input.length
        }`,
      );
    }
    if (this.#min !== null && input.length < this.#min) {
      throw new Error(
        `Expected array length to be greater than or equal to ${
          this.#min
        }, got ${input.length}`,
      );
    }
    const result = [] as any;
    for (let i = 0; i < input.length; i++) {
      const item = input[i];
      const parsed = this.#shape.parse(item);
      if (parsed === privateSymbol) continue;
      result[i] = parsed;
    }
    return result as any;
  }

  bsonSchema(): BuildArrayBsonSchemaLiteral<
    TShape,
    TOpts,
    TLength[0],
    TLength[1]
  > {
    return {
      bsonType: this.#opts.nullable ? ["array", "null"] : "array",
      items: this.#shape.bsonSchema(),
      ...(this.#max !== null && { maxItems: this.#max }),
      ...(this.#min !== null && { minItems: this.#min }),
    } as any;
  }

  toBson(
    input: ApplyOpts<ReturnType<this["parse"]>, TOpts>,
  ): ApplyOpts<Array<ReturnType<TShape["toBson"]>>, TOpts> {
    if (input === null) return null as any;
    if (input === undefined) return undefined as any;
    const result = [] as any;
    for (let i = 0; i < (input as any[]).length; i++) {
      const item = (input as any[])[i];
      const bson = this.#shape.toBson(item);
      result[i] = bson;
    }
    return result as any;
  }

  fromBson(
    input: ApplyOpts<ReturnType<this["parse"]>, TOpts>,
  ): ApplyOpts<Array<ReturnType<TShape["fromBson"]>>, TOpts> {
    if (input === null) return null as any;
    if (input === undefined) return undefined as any;
    const result = [] as any;
    for (let i = 0; i < (input as any[]).length; i++) {
      const item = (input as any[])[i];
      const bson = this.#shape.fromBson(item);
      result[i] = bson;
    }
    return result as any;
  }

  serialize(
    input: ApplyOpts<ReturnType<this["parse"]>, TOpts>,
  ): ApplyOpts<Array<ReturnType<TShape["serialize"]>>, TOpts> {
    if (input === null) return null as any;
    if (input === undefined) return undefined as any;
    const result = [] as any;
    for (let i = 0; i < (input as any[]).length; i++) {
      const item = (input as any[])[i];
      const serialized = this.#shape.serialize(item);
      result[i] = serialized;
    }
    return result as any;
  }

  deserialize(
    input: ApplyOpts<ReturnType<this["serialize"]>, TOpts>,
  ): ApplyOpts<Array<ReturnType<TShape["parse"]>>, TOpts> {
    if (input === null) return null as any;
    if (input === undefined) return undefined as any;
    const result = [] as any;
    for (let i = 0; i < (input as any[]).length; i++) {
      const item = (input as any[])[i];
      const deserialized = this.#shape.deserialize(item);
      result[i] = deserialized;
    }
    return result as any;
  }

  optional(): BorgArray<MakeOptional<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.optional = true;
    return clone as any;
  }

  nullable(): BorgArray<MakeNullable<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.nullable = true;
    return clone as any;
  }

  nullish(): BorgArray<MakeNullish<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.nullable = true;
    clone.#opts.optional = true;
    return clone as any;
  }

  required(): BorgArray<MakeRequired<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.optional = false;
    return clone as any;
  }

  notNull(): BorgArray<MakeNotNull<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.nullable = false;
    return clone as any;
  }

  notNullish(): BorgArray<MakeNotNullish<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.nullable = false;
    clone.#opts.optional = false;
    return clone as any;
  }

  private(): BorgArray<MakePrivate<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.private = true;
    return clone as any;
  }

  public(): BorgArray<MakePublic<TOpts>, TLength, TShape> {
    const clone = BorgArray.clone(this);
    clone.#opts.private = false;
    return clone as any;
  }

  max<const N extends number>(
    length: N,
  ): BorgArray<TOpts, [TLength[0], N], TShape> {
    const clone = BorgArray.clone(this);
    clone.#max = length;
    return clone as any;
  }

  min<const N extends number>(
    length: N,
  ): BorgArray<TOpts, [N, TLength[1]], TShape> {
    const clone = BorgArray.clone(this);
    clone.#min = length;
    return clone as any;
  }
  /* c8 ignore next */
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB        SSSSSSSSSSSSS    TTTTTTTTTTTTTTTTTTTT RRRRRRRRRRRRRRRRR     ///
///  B////////////////B     SS/////////////SS  T//////////////////T R////////////////R    ///
///  B/////////////////B  SS/////////////////S T//////////////////T R/////////////////R   ///
///  B//////BBBBBB//////B S///////SSSSS//////S T///TTTT////TTTT///T R//////RRRRRRR/////R  ///
///  BB/////B     B/////B S/////SS    SSSSSSS  T///T  T////T  T///T RR/////R      R////R  ///
///    B////B     B/////B S//////SS            TTTTT  T////T  TTTTT   R////R      R////R  ///
///    B////B     B/////B  SS/////SSS                 T////T          R////R      R////R  ///
///    B////BBBBBB/////B     SS//////SS               T////T          R////RRRRRRR////R   ///
///    B////////////BB         SS//////SS             T////T          R/////////////RR    ///
///    B////BBBBBB/////B         SS//////SS           T////T          R////RRRRRRR////R   ///
///    B////B     B/////B          SSS/////SS         T////T          R////R      R////R  ///
///    B////B     B/////B            SS//////S        T////T          R////R      R////R  ///
///    B////B     B/////B  SSSSSSS    SS/////S        T////T          R////R      R////R  ///
///  BB/////BBBBBB//////B S//////SSSSS///////S      TT//////TT      RR/////R      R////R  ///
///  B/////////////////B  S/////////////////SS      T////////T      R//////R      R////R  ///
///  B////////////////B    SS/////////////SS        T////////T      R//////R      R////R  ///
///  BBBBBBBBBBBBBBBBB       SSSSSSSSSSSSS          TTTTTTTTTT      RRRRRRRR      RRRRRR  ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

class BorgString<
  const TOpts extends TypeOptions = ["required", "notNull", "public"],
  const TLength extends MinMax = [null, null],
  const TPattern extends string = ".*",
> extends Borg<"string", TOpts> {
  #opts = {
    optional: false,
    nullable: false,
    private: false,
  };
  #min: TLength[0] = null;
  #max: TLength[1] = null;
  #regex: RegExp | undefined = undefined;

  constructor() {
    super();
  }

  static clone<const TBorg extends BorgString<any, any, any>>(
    borg: TBorg,
  ): TBorg {
    const clone = new BorgString();
    clone.#opts = { ...borg.#opts };
    clone.#min = borg.#min;
    clone.#max = borg.#max;
    clone.#regex = borg.#regex;
    return clone as any;
  }

  get meta(): {
    kind: "string";
    maxLength: TLength[1];
    minLength: TLength[0];
    pattern: ".*" extends TPattern ? undefined : TPattern;
  } & InferOpts<TOpts> {
    return {
      ...this.#opts,
      kind: "string",
      maxLength: this.#max,
      minLength: this.#min,
      pattern: this.#regex?.source,
    } as any;
  }

  min<const N extends number>(
    min: N,
  ): BorgString<TOpts, [N, TLength[1]], TPattern> {
    const clone = BorgString.clone(this);
    clone.#min = min;
    return clone as any;
  }

  max<const N extends number>(
    max: N,
  ): BorgString<TOpts, [TLength[0], N], TPattern> {
    const clone = BorgString.clone(this);
    clone.#max = max;
    return clone as any;
  }
  /**
   * @IMPORTANT RegExp flags are not supported, except for the "u" flag which is always set
   * @this {BorgString}
   * @param pattern a string that will be used as the source for a new RegExp
   * @returns a clone of this schema instance with the new pattern
   */
  pattern<const S extends string>(
    pattern: S,
  ): BorgString<TOpts, TLength, S> {
    const clone = BorgString.clone(this);
    clone.#regex = new RegExp(pattern, "u");
    return clone as any;
  }

  parse(input: unknown): ApplyOpts<string, TOpts> {
    if (this.#opts.private) {
      return privateSymbol as any;
    }
    if (input === null) {
      if (this.#opts.nullable) {
        return null as any;
      } else {
        throw new BorgError(
          `STRING_ERROR: Expected string${
            this.#opts.optional ? " or undefined" : ""
          }, got null`,
        );
      }
    }
    if (input === undefined) {
      if (this.#opts.optional) {
        return undefined as any;
      } else {
        throw new BorgError(
          `STRING_ERROR: Expected string${
            this.#opts.nullable ? " or null" : ""
          }, got undefined`,
        );
      }
    }
    if (typeof input !== "string") {
      throw new BorgError(
        `STRING_ERROR: Expected string${
          this.#opts.nullable
            ? " or null"
            : "" + this.#opts.optional
            ? " or undefined"
            : ""
        }, got ${typeof input}`,
      );
    }
    if (this.#min !== null && input.length < this.#min) {
      throw new BorgError(
        `STRING_ERROR: Expected string to be at least ${this.#min} characters`,
      );
    }
    if (this.#max !== null && input.length > this.#max) {
      throw new BorgError(
        `STRING_ERROR: Expected string to be at most ${this.#max} characters`,
      );
    }
    if (this.#regex !== undefined && !this.#regex.test(input)) {
      throw new BorgError(
        `STRING_ERROR: Expected string to match pattern ${this.#regex}`,
      );
    }
    return input as any;
  }

  serialize(input: ApplyOpts<string, TOpts>) {
    if (this.#opts.private) throw new Error("Cannot serialize private value");
    return input;
  }

  deserialize(input: ApplyOpts<string, TOpts>) {
    return input;
  }

  bsonSchema() {
    return {
      bsonType: this.#opts.nullable ? ["string", "null"] : "string",
      ...(this.#min !== null ? { minLength: this.#min } : {}),
      ...(this.#max !== null ? { maxLength: this.#max } : {}),
      ...(this.#regex ? { pattern: this.#regex.source } : {}),
    } as BuildStringBsonSchemaLiteral<TOpts, TLength[0], TLength[1], TPattern>;
  }

  toBson(input: ApplyOpts<string, TOpts>) {
    return input;
  }

  fromBson(input: ApplyOpts<string, TOpts>) {
    return input;
  }

  optional(): BorgString<MakeOptional<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.optional = true;
    return clone as any;
  }

  nullable(): BorgString<MakeNullable<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.nullable = true;
    return clone as any;
  }

  nullish(): BorgString<MakeNullish<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.optional = true;
    clone.#opts.nullable = true;
    return clone as any;
  }

  required(): BorgString<MakeRequired<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.optional = false;
    return clone as any;
  }

  notNull(): BorgString<MakeNotNull<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.nullable = false;
    return clone as any;
  }

  notNullish(): BorgString<MakeNotNullish<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.optional = false;
    clone.#opts.nullable = false;
    return clone as any;
  }

  private(): BorgString<MakePrivate<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.private = true;
    return clone as any;
  }

  public(): BorgString<MakePublic<TOpts>, TLength, TPattern> {
    const clone = BorgString.clone(this);
    clone.#opts.private = false;
    return clone as any;
  }
  /* c8 ignore next */
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB    NNNNNNN      NNNNNNN UUUUUUU      UUUUUUU MMMMMMM      MMMMMMM  ///
///  B////////////////B   N//////N     N/////N U/////U      U/////U M//////M    M//////M  ///
///  B/////////////////B  N///////N    N/////N U/////U      U/////U M///////M  M///////M  ///
///  B//////BBBBBB//////B N////////N   N/////N U/////U      U/////U M////////MM////////M  ///
///  BB/////B     B/////B N/////////N  N/////N U/////U      U/////U M//////////////////M  ///
///    B////B     B/////B N//////////N N/////N U/////U      U/////U M/////M//////M/////M  ///
///    B////B     B/////B N///////////NN/////N U/////U      U/////U M/////MM////MM/////M  ///
///    B////BBBBBB/////B  N////////////N/////N U/////U      U/////U M/////M M//M M/////M  ///
///    B////////////BB    N/////N////////////N U/////U      U/////U M/////M  MM  M/////M  ///
///    B////BBBBBB/////B  N/////NN///////////N U/////U      U/////U M/////M      M/////M  ///
///    B////B     B/////B N/////N N//////////N U/////U      U/////U M/////M      M/////M  ///
///    B////B     B/////B N/////N  N/////////N U/////U      U/////U M/////M      M/////M  ///
///    B////B     B/////B N/////N   N////////N U//////U    U//////U M/////M      M/////M  ///
///  BB/////BBBBBB//////B N/////N    N///////N  U//////UUUU//////U  M/////M      M/////M  ///
///  B/////////////////B  N/////N     N//////N   U//////////////U   M/////M      M/////M  ///
///  B////////////////B   N/////N      N/////N    UU//////////UU    M/////M      M/////M  ///
///  BBBBBBBBBBBBBBBBB    NNNNNNN       NNNNNN      UUUUUUUUUU      MMMMMMM      MMMMMMM  ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

class BorgNumber<
  TOpts extends TypeOptions = ["required", "notNull", "public"],
  TLength extends MinMax = [null, null],
> extends Borg<"number", TOpts> {
  #opts = {
    optional: false,
    nullable: false,
    private: false,
  };
  #min: TLength[0] = null;
  #max: TLength[1] = null;

  constructor() {
    super();
  }

  static clone<const TBorg extends BorgNumber<any, any>>(
    borg: TBorg,
  ): TBorg {
    const clone = new BorgNumber() as TBorg;
    clone.#opts = { ...borg.#opts };
    clone.#min = borg.#min;
    clone.#max = borg.#max;
    return clone;
  }

  get meta(): {
    kind: "number";
    max: TLength[1];
    min: TLength[0];
  } & InferOpts<TOpts> {
    return {
      kind: "number",
      max: this.#max,
      min: this.#min,
      ...this.#opts,
    } as any;
  }

  min<const N extends number>(min: N): BorgNumber<TOpts, [N, TLength[1]]> {
    const clone = BorgNumber.clone(this);
    clone.#min = min;
    return clone as any;
  }

  max<const N extends number>(max: N): BorgNumber<TOpts, [TLength[0], N]> {
    const clone = BorgNumber.clone(this);
    clone.#max = max;
    return clone as any;
  }

  range<const N extends number, const M extends number>(
    min: N,
    max: M,
  ): BorgNumber<TOpts, [N, M]> {
    const clone = BorgNumber.clone(this);
    clone.#min = min;
    clone.#max = max;
    return clone as any;
  }

  parse(input: unknown): ApplyOpts<number, TOpts> {
    if (this.#opts.private) {
      return privateSymbol as any;
    }
    if (input === null) {
      if (this.#opts.nullable) {
        return null as any;
      } else {
        throw new BorgError(
          `NUMBER_ERROR: Expected number${
            this.#opts.optional ? " or undefined" : ""
          }, got null`,
        );
      }
    }
    if (input === undefined) {
      if (this.#opts.optional) {
        return undefined as any;
      } else {
        throw new BorgError(
          `NUMBER_ERROR: Expected number${
            this.#opts.nullable ? " or null" : ""
          }, got undefined`,
        );
      }
    }
    if (typeof input !== "number") {
      throw new BorgError("NUMBER_ERROR: Expected number, got " + typeof input);
    }
    if (this.#min !== null && input < this.#min) {
      throw new BorgError(
        `NUMBER_ERROR: Expected number to be greater than or equal to ${
          this.#min
        }`,
      );
    }
    if (this.#max !== null && input > this.#max) {
      throw new BorgError(
        `NUMBER_ERROR: Expected number to be less than or equal to ${
          this.#max
        }`,
      );
    }
    return input as any;
  }

  bsonSchema(): BuildNumberBsonSchemaLiteral<TOpts, TLength[0], TLength[1]> {
    return {
      bsonType: this.#opts.nullable ? ["double", "null"] : "double",
      ...(this.#min !== null && { minimum: this.#min }),
      ...(this.#max !== null && { maximum: this.#max }),
    } as any;
  }

  toBson(input: ApplyOpts<number, TOpts>): ApplyOpts<Double, TOpts> {
    return typeof input === "number" ? new Double(input) : (input as any);
  }

  fromBson(input: ReturnType<this["toBson"]>): ApplyOpts<number, TOpts> {
    return (input?.valueOf() ?? input) as any;
  }

  serialize(input: ApplyOpts<number, TOpts>) {
    return input;
  }

  deserialize(input: ReturnType<this["serialize"]>) {
    return input;
  }

  optional(): BorgNumber<MakeOptional<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.optional = true;
    return clone as any;
  }

  nullable(): BorgNumber<MakeNullable<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.nullable = true;
    return clone as any;
  }

  required(): BorgNumber<MakeRequired<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.optional = false;
    return clone as any;
  }

  notNull(): BorgNumber<MakeNotNull<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.nullable = false;
    return clone as any;
  }

  nullish(): BorgNumber<MakeNullish<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.optional = true;
    clone.#opts.nullable = true;
    return clone as any;
  }

  notNullish(): BorgNumber<MakeNotNullish<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.optional = false;
    clone.#opts.nullable = false;
    return clone as any;
  }

  private(): BorgNumber<MakePrivate<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.private = true;
    return clone as any;
  }

  public(): BorgNumber<MakePublic<TOpts>, TLength> {
    const clone = BorgNumber.clone(this);
    clone.#opts.private = false;
    return clone as any;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB        OOOOOOOOOOOO         OOOOOOOOOOOO     LLLLLLLLLL            ///
///  B////////////////B     OO////////////OO     OO////////////OO   L////////L            ///
///  B/////////////////B   OO//////////////OO   OO//////////////OO  L////////L            ///
///  B//////BBBBBB//////B O///////OOO////////O O///////OOO////////O L////////L            ///
///  BB/////B     B/////B O//////O   O///////O O//////O   O///////O L////////L            ///
///    B////B     B/////B O/////O     O//////O O/////O     O//////O L//////L              ///
///    B////B     B/////B O/////O     O//////O O/////O     O//////O L//////L              ///
///    B////BBBBBB/////B  O/////O     O//////O O/////O     O//////O L//////L              ///
///    B////////////BB    O/////O     O//////O O/////O     O//////O L//////L              ///
///    B////BBBBBB/////B  O/////O     O//////O O/////O     O//////O L//////L              ///
///    B////B     B/////B O/////O     O//////O O/////O     O//////O L//////L              ///
///    B////B     B/////B O/////O     O//////O O/////O     O//////O L//////L              ///
///    B////B     B/////B O/////O     O//////O O/////O     O//////O L//////L              ///
///  BB/////BBBBBB//////B O///////OOO////////O O///////OOO////////O L//////LLLLLLLLLLLLL  ///
///  B/////////////////B  OO///////////////OO  OO///////////////OO  L//////////////////L  ///
///  B////////////////B    OO/////////////OO    OO/////////////OO   L//////////////////L  ///
///  BBBBBBBBBBBBBBBBB       OOOOOOOOOOOOOO       OOOOOOOOOOOOOO    LLLLLLLLLLLLLLLLLLLL  ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

class BorgBoolean<
  TOpts extends TypeOptions = ["required", "notNull", "public"],
> extends Borg<"boolean", TOpts> {
  #opts = {
    optional: false,
    nullable: false,
    private: false,
  };

  constructor() {
    super();
  }

  static clone<const TBorg extends BorgBoolean<any>>(borg: TBorg): TBorg {
    const clone = new BorgBoolean();
    clone.#opts = { ...borg.#opts };
    return clone as any;
  }

  get meta(): InferOpts<TOpts> & {
    kind: "boolean";
  } {
    return {
      kind: "boolean",
      ...this.#opts,
    } as any;
  }

  parse(input: unknown): ApplyOpts<boolean, TOpts> {
    if (this.#opts.private) {
      return privateSymbol as any;
    }
    if (input === null) {
      if (this.#opts.nullable) {
        return null as any;
      } else {
        throw new BorgError(
          `BOOLEAN_ERROR: Expected boolean${
            this.#opts.optional ? " or undefined" : ""
          }, got null`,
        );
      }
    }
    if (input === undefined) {
      if (this.#opts.optional) {
        return undefined as any;
      } else {
        throw new BorgError(
          `BOOLEAN_ERROR: Expected boolean${
            this.#opts.nullable ? " or null" : ""
          }, got undefined`,
        );
      }
    }
    if (typeof input !== "boolean") {
      throw new BorgError(
        "BOOLEAN_ERROR: Expected boolean, got " + typeof input,
      );
    }
    return input as any;
  }

  bsonSchema(): BuildBooleanBsonSchemaLiteral<TOpts> {
    return {
      bsonType: this.#opts.nullable ? ["bool", "null"] : "bool",
    } as any;
  }

  toBson(input: ApplyOpts<boolean, TOpts>): ApplyOpts<boolean, TOpts> {
    return input;
  }

  fromBson(input: ReturnType<this["toBson"]>): Parameters<this["toBson"]>[0] {
    return input;
  }

  serialize(input: ApplyOpts<boolean, TOpts>) {
    return input;
  }

  deserialize(
    input: ReturnType<this["serialize"]>,
  ): Parameters<this["serialize"]>[0] {
    return input;
  }

  optional(): BorgBoolean<MakeOptional<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.optional = true;
    return clone as any;
  }

  nullable(): BorgBoolean<MakeNullable<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.nullable = true;
    return clone as any;
  }

  required(): BorgBoolean<MakeRequired<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.optional = false;
    return clone as any;
  }

  notNull(): BorgBoolean<MakeNotNull<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.nullable = false;
    return clone as any;
  }

  nullish(): BorgBoolean<MakeNullish<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.optional = true;
    clone.#opts.nullable = true;
    return clone as any;
  }

  notNullish(): BorgBoolean<MakeNotNullish<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.optional = false;
    clone.#opts.nullable = false;
    return clone as any;
  }

  private(): BorgBoolean<MakePrivate<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.private = true;
    return clone as any;
  }

  public(): BorgBoolean<MakePublic<TOpts>> {
    const clone = BorgBoolean.clone(this);
    clone.#opts.private = false;
    return clone as any;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB                         IIIIIIIIIIIIIIIIIIII DDDDDDDDDDDDDDD       ///
///  B////////////////B                        I//////////////////I D//////////////DD     ///
///  B/////////////////B                       I//////////////////I D///////////////DD    ///
///  B//////BBBBBB//////B                      IIIIIII//////IIIIIII D/////DDDDDD/////DD   ///
///  BB/////B     B/////B                             I////I        D/////D    DD/////DD  ///
///    B////B     B/////B                             I////I        D/////D     DD/////D  ///
///    B////B     B/////B                             I////I        D/////D      D/////D  ///
///    B////BBBBBB/////B                              I////I        D/////D      D/////D  ///
///    B////////////BB                                I////I        D/////D      D/////D  ///
///    B////BBBBBB/////B                              I////I        D/////D      D/////D  ///
///    B////B     B/////B                             I////I        D/////D      D/////D  ///
///    B////B     B/////B                             I////I        D/////D     DD/////D  ///
///    B////B     B/////B                             I////I        D/////D    DD/////DD  ///
///  BB/////BBBBBB//////B #################### IIIIIII//////IIIIIII D/////DDOOOD/////DD   ///
///  B/////////////////B  #//////////////////# I//////////////////I D///////////////DD    ///
///  B////////////////B   #//////////////////# I//////////////////I D//////////////DD     ///
///  BBBBBBBBBBBBBBBBB    #################### IIIIIIIIIIIIIIIIIIII DDDDDDDDDDDDDDD       ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

class BorgId<
  const TOpts extends TypeOptions = ["required", "notNull", "public"],
  const TFormat extends string | ObjectId = string,
> extends Borg<"id", TOpts> {
  #opts = {
    optional: false,
    nullable: false,
    private: false,
  };
  #format = true;

  constructor() {
    super();
  }

  get meta(): InferOpts<TOpts> & {
    kind: "id";
    format: ObjectId extends TFormat ? "oid" : "string";
  } {
    return {
      kind: "id",
      format: this.#format ? "string" : "oid",
      ...this.#opts,
    } as any;
  }

  static clone<const TBorg extends BorgId<any, any>>(borg: TBorg): TBorg {
    const clone = new BorgId();
    clone.#opts = { ...borg.#opts };
    clone.#format = borg.#format as any;
    return clone as any;
  }

  static isObjectIdLike(input: unknown): input is ObjectIdLike {
    if (typeof input !== "object" || input === null) return false;
    return (
      "toHexString" in input &&
      "id" in input &&
      typeof input.toHexString === "function" &&
      (typeof input.id === "string" || input.id instanceof Uint8Array)
    );
  }

  static fromHex = (val: string) => ObjectId.createFromHexString(val);

  parse(input: unknown): ApplyOpts<TFormat, TOpts> {
    if (this.#opts.private) {
      return privateSymbol as any;
    }
    if (input === null) {
      if (this.#opts.nullable) {
        return null as any;
      } else {
        throw new BorgError(
          `ID_ERROR: Expected valid ObjectId${
            this.#opts.optional ? " or undefined" : ""
          }, got null`,
        );
      }
    }
    if (input === undefined) {
      if (this.#opts.optional) {
        return undefined as any;
      } else {
        throw new BorgError(
          `ID_ERROR: Expected valid ObjectId${
            this.#opts.nullable ? " or null" : ""
          }, got undefined`,
        );
      }
    }

    if (typeof input === "string") {
      if (ObjectId.isValid(input))
        return this.#format ? input : (BorgId.fromHex(input) as any);
    }
    if (typeof input === "number") {
      const hex = input.toString(16);
      if (ObjectId.isValid(input))
        return this.#format ? hex : (BorgId.fromHex(hex) as any);
    }
    if (input instanceof Uint8Array) {
      const hex = Buffer.from(input).toString("hex");
      if (ObjectId.isValid(input))
        return this.#format ? hex : (BorgId.fromHex(hex) as any);
    }
    if (BorgId.isObjectIdLike(input)) {
      const hex = input.toHexString();
      if (ObjectId.isValid(input))
        return this.#format ? hex : (BorgId.fromHex(hex) as any);
    }
    if (input instanceof ObjectId) {
      return this.#format ? input.toHexString() : (input as any);
    }
    throw new BorgError(
      `ID_ERROR: Expected valid ObjectId${
        this.#opts.optional ? " or undefined" : ""
      }${this.#opts.nullable ? " or null" : ""}, got ${typeof input}`,
    );
  }

  bsonSchema(): BuildOidBsonSchemaLiteral<TOpts> {
    return {
      bsonType: this.#opts.nullable ? ["null", "objectId"] : "objectId",
    } as any;
  }

  toBson(input: ApplyOpts<TFormat, TOpts>): ApplyOpts<ObjectId, TOpts> {
    if (input === undefined) return undefined as any;
    if (input === null) return null as any;
    if (typeof input === "string") return BorgId.fromHex(input) as any;
    return input as any;
  }

  fromBson(input: ApplyOpts<ObjectId, TOpts>): ApplyOpts<TFormat, TOpts> {
    if (input === undefined) return undefined as any;
    if (input === null) return null as any;
    if (this.#format) return input.toHexString() as any;
    return input as any;
  }

  serialize(input: ApplyOpts<TFormat, TOpts>): ApplyOpts<string, TOpts> {
    if (input === undefined) return undefined as any;
    if (input === null) return null as any;
    if (typeof input === "string") return input as any;
    return input.toHexString() as any;
  }

  deserialize(input: string): ApplyOpts<TFormat, TOpts> {
    if (input === undefined) return undefined as any;
    if (input === null) return null as any;
    if (this.#format) return input as any;
    return BorgId.fromHex(input) as any;
  }

  optional(): BorgId<MakeOptional<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.optional = true;
    return clone as any;
  }

  nullable(): BorgId<MakeNullable<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.nullable = true;
    return clone as any;
  }

  nullish(): BorgId<MakeNullish<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.optional = true;
    clone.#opts.nullable = true;
    return clone as any;
  }

  required(): BorgId<MakeRequired<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.optional = false;
    return clone as any;
  }

  notNull(): BorgId<MakeNotNull<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.nullable = false;
    return clone as any;
  }

  notNullish(): BorgId<MakeNotNullish<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.optional = false;
    clone.#opts.nullable = false;
    return clone as any;
  }

  private(): BorgId<MakePrivate<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.private = true;
    return clone as any;
  }

  public(): BorgId<MakePublic<TOpts>, TFormat> {
    const clone = BorgId.clone(this);
    clone.#opts.private = false;
    return clone as any;
  }

  asString(): BorgId<TOpts, string> {
    const clone = BorgId.clone(this);
    clone.#format = true as any;
    return clone as any;
  }

  asObjectId(): BorgId<TOpts, ObjectId> {
    const clone = BorgId.clone(this);
    clone.#format = false as any;
    return clone as any;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                       ///
///  BBBBBBBBBBBBBBBBB    MMMMMMM      MMMMMMM     OOOOOOOOOOOO     DDDDDDDDDDDDDDD       ///
///  B////////////////B   M//////M    M//////M   OO////////////OO   D//////////////DD     ///
///  B/////////////////B  M///////M  M///////M  OO//////////////OO  D///////////////DD    ///
///  B//////BBBBBB//////B M////////MM////////M O///////OOO////////O D/////DDDDDD/////DD   ///
///  BB/////B     B/////B M//////////////////M O//////O   O///////O D/////D    DD/////DD  ///
///    B////B     B/////B M/////M//////M/////M O/////O     O//////O D/////D     DD/////D  ///
///    B////B     B/////B M/////MM////MM/////M O/////O     O//////O D/////D      D/////D  ///
///    B////BBBBBB/////B  M/////M M//M M/////M O/////O     O//////O D/////D      D/////D  ///
///    B////////////BB    M/////M  MM  M/////M O/////O     O//////O D/////D      D/////D  ///
///    B////BBBBBB/////B  M/////M      M/////M O/////O     O//////O D/////D      D/////D  ///
///    B////B     B/////B M/////M      M/////M O/////O     O//////O D/////D      D/////D  ///
///    B////B     B/////B M/////M      M/////M O/////O     O//////O D/////D     DD/////D  ///
///    B////B     B/////B M/////M      M/////M O//////O   O///////O D/////D    DD/////DD  ///
///  BB/////BBBBBB//////B M/////M      M/////M O///////OOO////////O D/////DDOOOD/////DD   ///
///  B/////////////////B  M/////M      M/////M OO///////////////OO  D///////////////DD    ///
///  B////////////////B   M/////M      M/////M  OO/////////////OO   D//////////////DD     ///
///  BBBBBBBBBBBBBBBBB    MMMMMMM      MMMMMMM    OOOOOOOOOOOOOO    DDDDDDDDDDDDDDD       ///
///                                                                                       ///
/////////////////////////////////////////////////////////////////////////////////////////////

type BorgModel<
  TInputSchema extends AnyBorgObject,
  TServerModel extends object = InferParsedType<TInputSchema>,
  TOutputSchema extends AnyBorgObject = TInputSchema,
> = {
  createFromRequest: (
    input: InferParsedType<TInputSchema>,
  ) => InferParsedType<TOutputSchema>;
  sanitizeResponse: (input: TServerModel) => InferParsedType<TOutputSchema>;
  serializeInput: (
    parsedInput: InferParsedType<TInputSchema>,
  ) => ReturnType<TInputSchema["serialize"]>;
  deserializeInput: (
    serializedInput: ReturnType<TInputSchema["serialize"]>,
  ) => InferParsedType<TInputSchema>;
  serializeOutput: (
    parsedOutput: InferParsedType<TOutputSchema>,
  ) => ReturnType<TOutputSchema["serialize"]>;
  deserializeOutput: (
    serializedOutput: ReturnType<TOutputSchema["serialize"]>,
  ) => InferParsedType<TOutputSchema>;
  parseInput: (input: unknown) => InferParsedType<TInputSchema>;
  parseOutput: (input: unknown) => InferParsedType<TOutputSchema>;
};

function model<TSchema extends AnyBorgObject>(
  schema: TSchema,
): BorgModel<TSchema>;
function model<TSchema extends AnyBorgObject, TServerModel extends object>(
  schema: TSchema,
  transformInput: (input: InferParsedType<TSchema>) => TServerModel,
): BorgModel<TSchema, TServerModel>;
function model<
  TInputSchema extends AnyBorgObject,
  TServerModel extends object,
  TOutputSchema extends AnyBorgObject,
>(
  inputSchema: TInputSchema,
  transformInput: (input: InferParsedType<TInputSchema>) => TServerModel,
  transformOutput: (input: TServerModel) => InferParsedType<TOutputSchema>,
  outputSchema: TOutputSchema,
): BorgModel<TInputSchema, TServerModel, TOutputSchema>;

function model<
  TInputSchema extends AnyBorgObject,
  TServerModel extends object,
  TOutputSchema extends AnyBorgObject,
>(
  schema: TInputSchema,
  transformInput: (input: InferParsedType<TInputSchema>) => TServerModel = (
    input: InferParsedType<TInputSchema>,
  ) => input as any,
  transformOutput: (input: TServerModel) => InferParsedType<TOutputSchema> = (
    input: TServerModel,
  ) => input as any,
  outputSchema: TOutputSchema = schema as any,
): BorgModel<TInputSchema, TServerModel, TOutputSchema> {
  return {
    createFromRequest: input => transformOutput(transformInput(input)),
    sanitizeResponse: input => transformOutput(input),
    serializeInput: parsedInput => schema.serialize(parsedInput) as any,
    deserializeInput: serializedInput => schema.parse(serializedInput) as any,
    serializeOutput: parsedOutput =>
      outputSchema.serialize(parsedOutput) as any,
    deserializeOutput: serializedOutput =>
      outputSchema.parse(serializedOutput) as any,
    parseInput: input => schema.parse(input) as any,
    parseOutput: input => outputSchema.parse(input) as any,
  };
}

const B = {
  id: () => new BorgId(),
  string: () => new BorgString(),
  number: () => new BorgNumber(),
  boolean: () => new BorgBoolean(),
  array: <T extends B.SomeBorg>(item: T) => new BorgArray(item),
  object: <T extends { [key: string]: B.SomeBorg }>(shape: T) => new BorgObject(shape),
  model,
};

declare module B {
  export type Id<
    TOpts extends TypeOptions,
    TFormat extends "string" | "oid",
  > = BorgId<TOpts, TFormat>;

  export type String<
    TOpts extends TypeOptions,
    TLength extends MinMax = [null, null],
    TPattern extends string = ".*",
  > = BorgString<TOpts, TLength, TPattern>;

  export type Number<
    TOpts extends TypeOptions,
    TLength extends MinMax = [null, null],
  > = BorgNumber<TOpts, TLength>;

  export type Boolean<TOpts extends TypeOptions> = BorgBoolean<TOpts>;

  export type Array<
    TOpts extends TypeOptions,
    TItems extends B.SomeBorg,
    TLength extends MinMax = [null, null],
  > = BorgArray<TOpts, TLength, TItems>;

  export type Object<
    TOpts extends TypeOptions,
    TShape extends { [key: string]: B.SomeBorg },
  > = BorgObject<TOpts, TShape>;

  export type AnyBorg =
    | AnyBorgId
    | AnyBorgString
    | AnyBorgNumber
    | AnyBorgBoolean
    | AnyBorgArray
    | AnyBorgObject;

  export type SomeBorg = Borg<AnyKind, TypeOptions>;
}

export default B;
